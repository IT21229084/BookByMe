{"ast":null,"code":"'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = thing => thing instanceof AxiosHeaders ? thing.toJSON() : thing;\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\n\n\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({\n        caseless\n      }, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n\n    return source;\n  } // eslint-disable-next-line consistent-return\n\n\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  } // eslint-disable-next-line consistent-return\n\n\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  } // eslint-disable-next-line consistent-return\n\n\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  } // eslint-disable-next-line consistent-return\n\n\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);\n  });\n  return config;\n}","map":{"version":3,"sources":["D:/Projects/BookByMe/BookByMe/client/node_modules/axios/lib/core/mergeConfig.js"],"names":["utils","AxiosHeaders","headersToObject","thing","toJSON","mergeConfig","config1","config2","config","getMergedValue","target","source","caseless","isPlainObject","merge","call","isArray","slice","mergeDeepProperties","a","b","isUndefined","undefined","valueFromConfig2","defaultToConfig2","mergeDirectKeys","prop","mergeMap","url","method","data","baseURL","transformRequest","transformResponse","paramsSerializer","timeout","timeoutMessage","withCredentials","withXSRFToken","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","decompress","maxContentLength","maxBodyLength","beforeRedirect","transport","httpAgent","httpsAgent","cancelToken","socketPath","responseEncoding","validateStatus","headers","forEach","Object","keys","assign","computeConfigValue","configValue"],"mappings":"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","sourcesContent":["'use strict';\n\nimport utils from '../utils.js';\nimport AxiosHeaders from \"./AxiosHeaders.js\";\n\nconst headersToObject = (thing) => thing instanceof AxiosHeaders ? thing.toJSON() : thing;\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n *\n * @returns {Object} New object resulting from merging config2 to config1\n */\nexport default function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  const config = {};\n\n  function getMergedValue(target, source, caseless) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge.call({caseless}, target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(a, b, caseless) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(a, b, caseless);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a, caseless);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(a, b) {\n    if (!utils.isUndefined(b)) {\n      return getMergedValue(undefined, b);\n    } else if (!utils.isUndefined(a)) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(a, b, prop) {\n    if (prop in config2) {\n      return getMergedValue(a, b);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, a);\n    }\n  }\n\n  const mergeMap = {\n    url: valueFromConfig2,\n    method: valueFromConfig2,\n    data: valueFromConfig2,\n    baseURL: defaultToConfig2,\n    transformRequest: defaultToConfig2,\n    transformResponse: defaultToConfig2,\n    paramsSerializer: defaultToConfig2,\n    timeout: defaultToConfig2,\n    timeoutMessage: defaultToConfig2,\n    withCredentials: defaultToConfig2,\n    withXSRFToken: defaultToConfig2,\n    adapter: defaultToConfig2,\n    responseType: defaultToConfig2,\n    xsrfCookieName: defaultToConfig2,\n    xsrfHeaderName: defaultToConfig2,\n    onUploadProgress: defaultToConfig2,\n    onDownloadProgress: defaultToConfig2,\n    decompress: defaultToConfig2,\n    maxContentLength: defaultToConfig2,\n    maxBodyLength: defaultToConfig2,\n    beforeRedirect: defaultToConfig2,\n    transport: defaultToConfig2,\n    httpAgent: defaultToConfig2,\n    httpsAgent: defaultToConfig2,\n    cancelToken: defaultToConfig2,\n    socketPath: defaultToConfig2,\n    responseEncoding: defaultToConfig2,\n    validateStatus: mergeDirectKeys,\n    headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)\n  };\n\n  utils.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {\n    const merge = mergeMap[prop] || mergeDeepProperties;\n    const configValue = merge(config1[prop], config2[prop], prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n}\n"]},"metadata":{},"sourceType":"module"}